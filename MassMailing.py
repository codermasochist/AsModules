"""
 __  __                               _ _ _             
|  \/  | __ _ ___ ___ _ __ ___   __ _(_) (_)_ __   __ _ 
| |\/| |/ _` / __/ __| '_ ` _ \ / _` | | | | '_ \ / _` |
| |  | | (_| \__ \__ \ | | | | | (_| | | | | | | | (_| |
|_|  |_|\__,_|___/___/_| |_| |_|\__,_|_|_|_|_| |_|\__, |
                                                  |___/
"""

# meta developer: @codermasochist

from .. import loader, utils
from asyncio import sleep
from telethon.tl.types import Message

@loader.tds
class MassMailing(loader.Module):
    """–º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º."""

    strings = {
        "name": "Mass Mailing",
        "what": "<blockquote><emoji document_id=5276477287183687194>üëé</emoji> <b>–µ–±–µ–Ω—å. –≤–æ—Ç —Ç–∞–∫ –Ω–∞–¥–æ: </b><code>.rsl —Ç–µ–∫—Å—Ç | 2 | 3</code> (–∑–∞–¥–µ—Ä–∂–∫–∞ / –ø–æ–≤—Ç–æ—Ä—ã)</blockquote>",
        "start": "<blockquote><emoji document_id=5258332798409783582>üöÄ</emoji> <b>–Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b></blockquote>\n<blockquote><emoji document_id=5839380464116175529>‚úèÔ∏è</emoji> <b>–∑–∞–¥–µ—Ä–∂–∫–∞</b>: <code>{delay}</code> —Å–µ–∫ | <b>–ø–æ–≤—Ç–æ—Ä—ã</b>: <code>{repeat}</code></blockquote>",
        "stop": "<blockquote><emoji document_id=5253868738251335638>ü§ö</emoji> <b>—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b></blockquote>\n<blockquote><emoji document_id=5843908536467198016>‚úÖÔ∏è</emoji> <b>—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b> –≤ {success} —á–∞—Ç–æ–≤</blockquote>\n<blockquote><emoji document_id=5271533904380046720>üôÖ‚Äç‚ôÇÔ∏è</emoji> <b>–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ </b><code>{failed}</code> <b>—á–∞—Ç–æ–≤.</b></blockquote>",
        "trying_stop": "<blockquote><emoji document_id=5355133243773435190>‚ö†Ô∏è</emoji><b> –ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É...</b></blockquote>",
    }

    def __init__(self):
        self._stop_rsl = False

    async def rslcmd(self, message: Message):
        """‚Äî —Ç–µ–∫—Å—Ç | –∑–∞–¥–µ—Ä–∂–∫–∞ | –ø–æ–≤—Ç–æ—Ä—ã (–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞)"""
        penis = utils.get_args_raw(message)
        parts = penis.split("|")
        reply = await message.get_reply_message()

        media = None
        text = ""
        delay = 0
        repeat = 0

        if reply and len(parts) == 2:
            text = reply.raw_text or reply.message or ""
            media = reply.media
            try:
                delay = int(parts[0].strip())
                repeat = int(parts[1].strip())
            except Exception:
                await utils.answer(message, self.strings["what"])
                return
        elif reply and len(parts) == 0:
            text = reply.raw_text or reply.message or ""
            media = reply.media
            delay = 2
            repeat = 1
        elif len(parts) == 3:
            try:
                text = parts[0].strip()
                delay = int(parts[1].strip())
                repeat = int(parts[2].strip())
            except Exception:
                await utils.answer(message, self.strings["what"])
                return
        else:
            await utils.answer(message, self.strings["what"])
            return

        self._stop_rsl = False
        await utils.answer(message, self.strings["start"].format(delay=delay, repeat=repeat))

        me = await message.client.get_me()
        dialogs = [
            dialog for dialog in await message.client.get_dialogs()
            if not (dialog.is_user and dialog.id == me.id)
        ]

        success = 0
        failed = 0

        for _ in range(repeat):
            if self._stop_rsl:
                await utils.answer(message, self.strings["stop"].format(success=success, failed=failed))
                return

            for dialog in dialogs:
                if self._stop_rsl:
                    await utils.answer(message, self.strings["stop"].format(success=success, failed=failed))
                    return

                try:
                    await message.client.send_file(dialog.id, media, caption=text) if media else await message.client.send_message(dialog.id, text)
                    success += 1
                    await sleep(3)
                except Exception:
                    failed += 1

            await sleep(delay)

        await utils.answer(message, self.strings["stop"].format(success=success, failed=failed))

    async def stoprslcmd(self, message: Message):
        """‚Äî —Å—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∏."""
        self._stop_rsl = True
        await self.client.send_message(message.chat_id, self.strings["trying_stop"])
