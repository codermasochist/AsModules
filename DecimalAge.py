# meta developer: @codermasochist

import datetime
import calendar
from .. import loader, utils

@loader.tds
class decimalage(loader.Module):
    """—É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–æ—á–Ω–µ–π—à–∏–π –≤–æ–∑—Ä–∞—Å—Ç"""
    
    strings = {
        "name": "Decimal Age?",
        "error": "<blockquote><emoji document_id=5276477287183687194>üëé</emoji><b> –Ω–∞–¥–æ —Ç–∞–∫: </b><code>–¥–¥.–º–º.–≥–≥</code></blockquote>",
       "age": "<blockquote><emoji document_id=5336985409220001678>‚úÖ</emoji><b> –í–∞—à —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: </b>"
       "<code>{}</code> –ª–µ—Ç, <code>{}</code> –º–µ—Å—è—Ü–µ–≤, <code>{}</code> –¥–Ω–µ–π, <code>{}</code> —á–∞—Å–æ–≤, "
       "<code>{}</code> –º–∏–Ω—É—Ç –∏ <code>{}</code> —Å–µ–∫—É–Ω–¥.</blockquote>\n<blockquote><emoji document_id=5282845662826739893>üî§</emoji> <b>–≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ:</b><br> <code>{}</code> –ª–µ—Ç.</blockquote>"
    }
    
    async def exactagecmd(self, m):
        """‚Äî –¥–¥.–º–º.–≥–≥"""
        args = utils.get_args_raw(m)
        try:
            bd = datetime.datetime.strptime(args, '%d.%m.%Y')
            now = datetime.datetime.now()

            years = now.year - bd.year
            if now.month < bd.month or (now.month == bd.month and now.day < bd.day):
                years -= 1

            months = now.month - bd.month
            if now.day < bd.day:
                months -= 1
            if months < 0:
                months += 12

            days_in_previous_month = calendar.monthrange(now.year, now.month - 1 if now.month > 1 else 12)[1]
            days = now.day - bd.day
            if days < 0:
                days = days_in_previous_month + days

            hours = now.hour - bd.hour
            minutes = now.minute - bd.minute
            seconds = now.second - bd.second
            
            if seconds < 0:
                seconds += 60
                minutes -= 1
            if minutes < 0:
                minutes += 60
                hours -= 1
            if hours < 0:
                hours += 24
            
            total_days = (now - bd).days
            age_decimal = total_days / 365.2425
            
            await utils.answer(m, self.strings["age"].format(years, months, days, hours, minutes, seconds, age_decimal))
        except (IndexError, ValueError):
            await utils.answer(m, self.strings["error"])
